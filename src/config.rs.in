use log4rs::file::raw::Encoder;
use serde::de::{Deserialize, Deserializer};
use serde_value::Value;
use std::collections::BTreeMap;

#[derive(Deserialize)]
#[serde(deny_unknown_fields)]
pub struct Config {
    pub path: String,
    pub append: Option<bool>,
    pub encoder: Option<Encoder>,
    pub policy: Policy,
}

pub struct Policy {
    pub kind: String,
    pub config: Value,
}

impl Deserialize for Policy {
    fn deserialize<D>(d: &mut D) -> Result<Policy, D::Error>
        where D: Deserializer
    {
        let mut map = try!(BTreeMap::<Value, Value>::deserialize(d));

        let kind = match map.remove(&Value::String("kind".to_owned())) {
            Some(kind) => try!(kind.deserialize_into().map_err(|e| e.to_error())),
            None => "compound".to_owned(),
        };

        Ok(Policy {
            kind: kind,
            config: Value::Map(map),
        })
    }
}
