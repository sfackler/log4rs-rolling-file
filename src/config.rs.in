use log4rs::file::raw::Encoder;
use serde::de::{self, Deserialize, Deserializer};
use serde_value::Value;
use std::collections::BTreeMap;

#[derive(Deserialize)]
pub struct Config {
    pub path: String,
    pub append: Option<bool>,
    pub encoder: Option<Encoder>,
    pub trigger: Trigger,
    pub roller: Roller,
}

pub struct Trigger {
    pub kind: String,
    pub config: Value,
}

impl Deserialize for Trigger {
    fn deserialize<D>(d: &mut D) -> Result<Trigger, D::Error>
        where D: Deserializer
    {
        let mut map = try!(BTreeMap::<Value, Value>::deserialize(d));

        let kind = match map.remove(&Value::String("kind".to_owned())) {
            Some(kind) => try!(kind.deserialize_into().map_err(|e| e.to_error())),
            None => return Err(de::Error::missing_field("kind")),
        };

        Ok(Trigger {
            kind: kind,
            config: Value::Map(map),
        })
    }
}

pub struct Roller {
    pub kind: String,
    pub config: Value,
}

impl Deserialize for Roller {
    fn deserialize<D>(d: &mut D) -> Result<Roller, D::Error>
        where D: Deserializer
    {
        let mut map = try!(BTreeMap::<Value, Value>::deserialize(d));

        let kind = match map.remove(&Value::String("kind".to_owned())) {
            Some(kind) => try!(kind.deserialize_into().map_err(|e| e.to_error())),
            None => return Err(de::Error::missing_field("kind")),
        };

        Ok(Roller {
            kind: kind,
            config: Value::Map(map),
        })
    }
}
